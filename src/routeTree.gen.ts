/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthRouteRouteImport } from './routes/auth/route'
import { Route as MainRouteRouteImport } from './routes/_main/route'
import { Route as MainIndexRouteImport } from './routes/_main/index'
import { Route as AuthLoginRouteImport } from './routes/auth/login'
import { Route as MainProfileRouteImport } from './routes/_main/profile'
import { Route as MainOwnerIndexRouteImport } from './routes/_main/owner/index'
import { Route as MainNotificationsIndexRouteImport } from './routes/_main/notifications/index'
import { Route as MainBranchesIndexRouteImport } from './routes/_main/branches/index'
import { Route as MainArticlesIndexRouteImport } from './routes/_main/articles/index'
import { Route as MainBranchesAddIndexRouteImport } from './routes/_main/branches/add.index'
import { Route as MainArticlesAddIndexRouteImport } from './routes/_main/articles/add/index'
import { Route as MainBranchesBranchIdEditRouteImport } from './routes/_main/branches/$branchId/edit'
import { Route as MainArticlesArticalIdEditRouteImport } from './routes/_main/articles/$articalId/edit'

const MainAboutLazyRouteImport = createFileRoute('/_main/about')()
const MainSlidersIndexLazyRouteImport = createFileRoute('/_main/sliders/')()

const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const MainRouteRoute = MainRouteRouteImport.update({
  id: '/_main',
  getParentRoute: () => rootRouteImport,
} as any)
const MainIndexRoute = MainIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainAboutLazyRoute = MainAboutLazyRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => MainRouteRoute,
} as any).lazy(() => import('./routes/_main/about.lazy').then((d) => d.Route))
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRouteRoute,
} as any)
const MainProfileRoute = MainProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainSlidersIndexLazyRoute = MainSlidersIndexLazyRouteImport.update({
  id: '/sliders/',
  path: '/sliders/',
  getParentRoute: () => MainRouteRoute,
} as any).lazy(() =>
  import('./routes/_main/sliders/index.lazy').then((d) => d.Route),
)
const MainOwnerIndexRoute = MainOwnerIndexRouteImport.update({
  id: '/owner/',
  path: '/owner/',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainNotificationsIndexRoute = MainNotificationsIndexRouteImport.update({
  id: '/notifications/',
  path: '/notifications/',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainBranchesIndexRoute = MainBranchesIndexRouteImport.update({
  id: '/branches/',
  path: '/branches/',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainArticlesIndexRoute = MainArticlesIndexRouteImport.update({
  id: '/articles/',
  path: '/articles/',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainBranchesAddIndexRoute = MainBranchesAddIndexRouteImport.update({
  id: '/branches/add/',
  path: '/branches/add/',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainArticlesAddIndexRoute = MainArticlesAddIndexRouteImport.update({
  id: '/articles/add/',
  path: '/articles/add/',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainBranchesBranchIdEditRoute =
  MainBranchesBranchIdEditRouteImport.update({
    id: '/branches/$branchId/edit',
    path: '/branches/$branchId/edit',
    getParentRoute: () => MainRouteRoute,
  } as any)
const MainArticlesArticalIdEditRoute =
  MainArticlesArticalIdEditRouteImport.update({
    id: '/articles/$articalId/edit',
    path: '/articles/$articalId/edit',
    getParentRoute: () => MainRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/auth': typeof AuthRouteRouteWithChildren
  '/profile': typeof MainProfileRoute
  '/auth/login': typeof AuthLoginRoute
  '/about': typeof MainAboutLazyRoute
  '/': typeof MainIndexRoute
  '/articles': typeof MainArticlesIndexRoute
  '/branches': typeof MainBranchesIndexRoute
  '/notifications': typeof MainNotificationsIndexRoute
  '/owner': typeof MainOwnerIndexRoute
  '/sliders': typeof MainSlidersIndexLazyRoute
  '/articles/$articalId/edit': typeof MainArticlesArticalIdEditRoute
  '/branches/$branchId/edit': typeof MainBranchesBranchIdEditRoute
  '/articles/add': typeof MainArticlesAddIndexRoute
  '/branches/add': typeof MainBranchesAddIndexRoute
}
export interface FileRoutesByTo {
  '/auth': typeof AuthRouteRouteWithChildren
  '/profile': typeof MainProfileRoute
  '/auth/login': typeof AuthLoginRoute
  '/about': typeof MainAboutLazyRoute
  '/': typeof MainIndexRoute
  '/articles': typeof MainArticlesIndexRoute
  '/branches': typeof MainBranchesIndexRoute
  '/notifications': typeof MainNotificationsIndexRoute
  '/owner': typeof MainOwnerIndexRoute
  '/sliders': typeof MainSlidersIndexLazyRoute
  '/articles/$articalId/edit': typeof MainArticlesArticalIdEditRoute
  '/branches/$branchId/edit': typeof MainBranchesBranchIdEditRoute
  '/articles/add': typeof MainArticlesAddIndexRoute
  '/branches/add': typeof MainBranchesAddIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_main': typeof MainRouteRouteWithChildren
  '/auth': typeof AuthRouteRouteWithChildren
  '/_main/profile': typeof MainProfileRoute
  '/auth/login': typeof AuthLoginRoute
  '/_main/about': typeof MainAboutLazyRoute
  '/_main/': typeof MainIndexRoute
  '/_main/articles/': typeof MainArticlesIndexRoute
  '/_main/branches/': typeof MainBranchesIndexRoute
  '/_main/notifications/': typeof MainNotificationsIndexRoute
  '/_main/owner/': typeof MainOwnerIndexRoute
  '/_main/sliders/': typeof MainSlidersIndexLazyRoute
  '/_main/articles/$articalId/edit': typeof MainArticlesArticalIdEditRoute
  '/_main/branches/$branchId/edit': typeof MainBranchesBranchIdEditRoute
  '/_main/articles/add/': typeof MainArticlesAddIndexRoute
  '/_main/branches/add/': typeof MainBranchesAddIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/auth'
    | '/profile'
    | '/auth/login'
    | '/about'
    | '/'
    | '/articles'
    | '/branches'
    | '/notifications'
    | '/owner'
    | '/sliders'
    | '/articles/$articalId/edit'
    | '/branches/$branchId/edit'
    | '/articles/add'
    | '/branches/add'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/auth'
    | '/profile'
    | '/auth/login'
    | '/about'
    | '/'
    | '/articles'
    | '/branches'
    | '/notifications'
    | '/owner'
    | '/sliders'
    | '/articles/$articalId/edit'
    | '/branches/$branchId/edit'
    | '/articles/add'
    | '/branches/add'
  id:
    | '__root__'
    | '/_main'
    | '/auth'
    | '/_main/profile'
    | '/auth/login'
    | '/_main/about'
    | '/_main/'
    | '/_main/articles/'
    | '/_main/branches/'
    | '/_main/notifications/'
    | '/_main/owner/'
    | '/_main/sliders/'
    | '/_main/articles/$articalId/edit'
    | '/_main/branches/$branchId/edit'
    | '/_main/articles/add/'
    | '/_main/branches/add/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  MainRouteRoute: typeof MainRouteRouteWithChildren
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_main': {
      id: '/_main'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MainRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_main/': {
      id: '/_main/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof MainIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/about': {
      id: '/_main/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof MainAboutLazyRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_main/profile': {
      id: '/_main/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof MainProfileRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/sliders/': {
      id: '/_main/sliders/'
      path: '/sliders'
      fullPath: '/sliders'
      preLoaderRoute: typeof MainSlidersIndexLazyRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/owner/': {
      id: '/_main/owner/'
      path: '/owner'
      fullPath: '/owner'
      preLoaderRoute: typeof MainOwnerIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/notifications/': {
      id: '/_main/notifications/'
      path: '/notifications'
      fullPath: '/notifications'
      preLoaderRoute: typeof MainNotificationsIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/branches/': {
      id: '/_main/branches/'
      path: '/branches'
      fullPath: '/branches'
      preLoaderRoute: typeof MainBranchesIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/articles/': {
      id: '/_main/articles/'
      path: '/articles'
      fullPath: '/articles'
      preLoaderRoute: typeof MainArticlesIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/branches/add/': {
      id: '/_main/branches/add/'
      path: '/branches/add'
      fullPath: '/branches/add'
      preLoaderRoute: typeof MainBranchesAddIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/articles/add/': {
      id: '/_main/articles/add/'
      path: '/articles/add'
      fullPath: '/articles/add'
      preLoaderRoute: typeof MainArticlesAddIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/branches/$branchId/edit': {
      id: '/_main/branches/$branchId/edit'
      path: '/branches/$branchId/edit'
      fullPath: '/branches/$branchId/edit'
      preLoaderRoute: typeof MainBranchesBranchIdEditRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/articles/$articalId/edit': {
      id: '/_main/articles/$articalId/edit'
      path: '/articles/$articalId/edit'
      fullPath: '/articles/$articalId/edit'
      preLoaderRoute: typeof MainArticlesArticalIdEditRouteImport
      parentRoute: typeof MainRouteRoute
    }
  }
}

interface MainRouteRouteChildren {
  MainProfileRoute: typeof MainProfileRoute
  MainAboutLazyRoute: typeof MainAboutLazyRoute
  MainIndexRoute: typeof MainIndexRoute
  MainArticlesIndexRoute: typeof MainArticlesIndexRoute
  MainBranchesIndexRoute: typeof MainBranchesIndexRoute
  MainNotificationsIndexRoute: typeof MainNotificationsIndexRoute
  MainOwnerIndexRoute: typeof MainOwnerIndexRoute
  MainSlidersIndexLazyRoute: typeof MainSlidersIndexLazyRoute
  MainArticlesArticalIdEditRoute: typeof MainArticlesArticalIdEditRoute
  MainBranchesBranchIdEditRoute: typeof MainBranchesBranchIdEditRoute
  MainArticlesAddIndexRoute: typeof MainArticlesAddIndexRoute
  MainBranchesAddIndexRoute: typeof MainBranchesAddIndexRoute
}

const MainRouteRouteChildren: MainRouteRouteChildren = {
  MainProfileRoute: MainProfileRoute,
  MainAboutLazyRoute: MainAboutLazyRoute,
  MainIndexRoute: MainIndexRoute,
  MainArticlesIndexRoute: MainArticlesIndexRoute,
  MainBranchesIndexRoute: MainBranchesIndexRoute,
  MainNotificationsIndexRoute: MainNotificationsIndexRoute,
  MainOwnerIndexRoute: MainOwnerIndexRoute,
  MainSlidersIndexLazyRoute: MainSlidersIndexLazyRoute,
  MainArticlesArticalIdEditRoute: MainArticlesArticalIdEditRoute,
  MainBranchesBranchIdEditRoute: MainBranchesBranchIdEditRoute,
  MainArticlesAddIndexRoute: MainArticlesAddIndexRoute,
  MainBranchesAddIndexRoute: MainBranchesAddIndexRoute,
}

const MainRouteRouteWithChildren = MainRouteRoute._addFileChildren(
  MainRouteRouteChildren,
)

interface AuthRouteRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  MainRouteRoute: MainRouteRouteWithChildren,
  AuthRouteRoute: AuthRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
