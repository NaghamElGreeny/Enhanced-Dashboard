/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthRouteRouteImport } from './routes/auth/route'
import { Route as MainRouteRouteImport } from './routes/_main/route'
import { Route as MainIndexRouteImport } from './routes/_main/index'
import { Route as MainSlidersRouteImport } from './routes/_main/sliders'
import { Route as MainProfileRouteImport } from './routes/_main/profile'
import { Route as MainAboutRouteImport } from './routes/_main/about'
import { Route as AuthLoginIndexRouteImport } from './routes/auth/login/index'

const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const MainRouteRoute = MainRouteRouteImport.update({
  id: '/_main',
  getParentRoute: () => rootRouteImport,
} as any)
const MainIndexRoute = MainIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainSlidersRoute = MainSlidersRouteImport.update({
  id: '/sliders',
  path: '/sliders',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainProfileRoute = MainProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => MainRouteRoute,
} as any)
const MainAboutRoute = MainAboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => MainRouteRoute,
} as any)
const AuthLoginIndexRoute = AuthLoginIndexRouteImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => AuthRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/auth': typeof AuthRouteRouteWithChildren
  '/about': typeof MainAboutRoute
  '/profile': typeof MainProfileRoute
  '/sliders': typeof MainSlidersRoute
  '/': typeof MainIndexRoute
  '/auth/login': typeof AuthLoginIndexRoute
}
export interface FileRoutesByTo {
  '/auth': typeof AuthRouteRouteWithChildren
  '/about': typeof MainAboutRoute
  '/profile': typeof MainProfileRoute
  '/sliders': typeof MainSlidersRoute
  '/': typeof MainIndexRoute
  '/auth/login': typeof AuthLoginIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_main': typeof MainRouteRouteWithChildren
  '/auth': typeof AuthRouteRouteWithChildren
  '/_main/about': typeof MainAboutRoute
  '/_main/profile': typeof MainProfileRoute
  '/_main/sliders': typeof MainSlidersRoute
  '/_main/': typeof MainIndexRoute
  '/auth/login/': typeof AuthLoginIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/auth' | '/about' | '/profile' | '/sliders' | '/' | '/auth/login'
  fileRoutesByTo: FileRoutesByTo
  to: '/auth' | '/about' | '/profile' | '/sliders' | '/' | '/auth/login'
  id:
    | '__root__'
    | '/_main'
    | '/auth'
    | '/_main/about'
    | '/_main/profile'
    | '/_main/sliders'
    | '/_main/'
    | '/auth/login/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  MainRouteRoute: typeof MainRouteRouteWithChildren
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_main': {
      id: '/_main'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MainRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_main/': {
      id: '/_main/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof MainIndexRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/sliders': {
      id: '/_main/sliders'
      path: '/sliders'
      fullPath: '/sliders'
      preLoaderRoute: typeof MainSlidersRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/profile': {
      id: '/_main/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof MainProfileRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/about': {
      id: '/_main/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof MainAboutRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/auth/login/': {
      id: '/auth/login/'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginIndexRouteImport
      parentRoute: typeof AuthRouteRoute
    }
  }
}

interface MainRouteRouteChildren {
  MainAboutRoute: typeof MainAboutRoute
  MainProfileRoute: typeof MainProfileRoute
  MainSlidersRoute: typeof MainSlidersRoute
  MainIndexRoute: typeof MainIndexRoute
}

const MainRouteRouteChildren: MainRouteRouteChildren = {
  MainAboutRoute: MainAboutRoute,
  MainProfileRoute: MainProfileRoute,
  MainSlidersRoute: MainSlidersRoute,
  MainIndexRoute: MainIndexRoute,
}

const MainRouteRouteWithChildren = MainRouteRoute._addFileChildren(
  MainRouteRouteChildren,
)

interface AuthRouteRouteChildren {
  AuthLoginIndexRoute: typeof AuthLoginIndexRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthLoginIndexRoute: AuthLoginIndexRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  MainRouteRoute: MainRouteRouteWithChildren,
  AuthRouteRoute: AuthRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
